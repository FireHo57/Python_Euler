Things that I need to think about:
  currently finding the proper divisors is a very slow operation (walks through all the numbers and checks the modulo result),
  I feel that there has to be a better approach to finding then proper divisors (and if not then a quicker implementation)
  
  Efficient way of searching for amicable numbers. Posssibly by copying the constructed OrderedDict and swapping the key/values then 
  walking through one arrays values searching for that value in the other array (which should be a key value)
  
  e.g.
  my_ordered1=
  [1]{0}
  [2]{1}
  [3]{1}
  [4]{3}
  [5]{1}
  [6]{6}
  [7]{1}
  [8]{7}
  [9]{4}
  
  my_swapped_ordered=
  [0]{1}
  [1]{2}
  [1]{3}
  [3]{4}
  [1]{5}
  [6]{6}
  [1]{7}
  [7]{8}
  [4]{9}
  
  ## ROUGH PSEUDOCODE ##
  for value in my_ordered:
    match = my_swapped_ordered.find(value)
    if match is value:
      not amicable
    else:
      if match.get_value() == value:
        amicable
